[{"body":" This is just a summary on how to get started. If you are stuck or have any questions, please join our Discord server and give us a shout on the #dev channel\nAny IDE with good support for GoLang and JavaScript/Node can be used for Navidrome development. We suggest using Visual Studio Code, which has excellent support for both languages.\nUsing VSCode + Dev Container (Docker) The project includes a VSCode Dev Container configuration for using with Docker. The Dev Container provides all dependencies out-of-the-box. If you prefer to install all dependencies yourself, or cannot/don’t want to install Docker for any reason, see the other sections below for step by step instructions for your OS.\nNote Keep in mind that the overall experience when using Docker Desktop for development will be slower than normal, because access to the host OS filesystem is generally slower. If you want to have full performance, we recommend installing the dependencies directly on your system and skip using Docker for development. Unix-based systems (Linux, macOS, BSD, …) Install GoLang 1.20+\nInstall Node 16\nInstall TagLib\nUbuntu: sudo apt install libtag1-dev Arch Linux: pacman -S taglib macOS: brew install taglib For other platforms check their installation instructions Install pkg-config\nClone the project from https://github.com/navidrome/navidrome\nInstall development tools: make setup. This may take a while to complete\nTest installation: make buildall. This command should create a navidrome executable in the project’s folder\nCreate a navidrome.toml config file in the project’s folder with (at least) the following options:\n# Set your music folder, preferable a specific development music library with few songs, # to make scan fast MusicFolder = \"/path/to/music/folder\" # Make logging more verbose LogLevel = \"debug\" # This option will always create an `admin` user with the specified password, so you don't # have to create a user every time you delete your dev database DevAutoCreateAdminPassword = \"password\" # Move the data/DB folder out of the root. `./data` folder is ignored by git DataFolder = \"./data\" # If you are developing in macOS with its firewall enabled, uncomment the next line to avoid # having to accept incoming network connections every time the server restarts: # Address = \"localhost\" To start Navidrome in development mode, just run make dev. This will start both the backend and the frontend in “watch” mode, so any changes will automatically be reloaded. It will open Navidrome automatically in your browser, using the URL http://localhost:4533/\nIf it does not open a new window in your browser, check the output for any error messages.\nFor more useful make targets, run make help.\nWindows (using WSL) Even though it is possible to setup a fully working Navidrome development environment in Windows, we currently don’t provide instructions for that (feel free to contribute to these docs if you successfully set it up).\nThe (arguably better) alternative is to set up the project using Visual Studio Code and WSL, which effectively lets you develop in a Linux environment while still using your Windows system.\nInstalling WSL Make sure your Windows 10 is updated. Go to Settings \u003e Turn Windows feature on or off \u003e Windows subsystem for Linux. Go to Microsoft Store and download and install any Linux distro you like. For maximum compatibility, we recommend Ubuntu. Open Downloaded Linux distro, add username and password and then update it using: sudo apt update \u0026\u0026 sudo apt upgrade -y. Install needed compilers for building Navidrome: sudo apt install gcc g++ This will create an Linux terminal where you can execute any Linux commands. Make sure you are using WSL 2.0\nConfiguring Visual Studio Code Click on Extensions (present on leftmost column), install Remote Development extension and reload VSCode. Press F1, execute Remote-WSL: New Window. This will connect your installed Linux distro to VSCode. Now you can open a VSCode terminal and you’ll be able to run any Linux command. Common Issues Because of this WSL issue you need to use your network IP address to be able to login to Navidrome in development mode. Otherwise you will get an Error: Unauthorized when logging in. You can see your network IP address after running make dev. Now that you have a working instance of Linux running on your machine, follow the steps above for Unix-based system in the VSCode terminal. For more information on working with VSCode+WSL, check their documentation.\nTroubleshooting System limit for number of file watchers reached If you encounter the Error: ENOSPC: System limit for number of file watchers reached, watch while running make dev on Linux systems, then your system is maxing out the number of files that can be “watched” for changes at one time.\nTo increase this limit, you can run the command echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf \u0026\u0026 sudo sysctl -p, which adds the line fs.inotify.max_user_watches=524288 to /etc/sysctl.conf and reloads sysctl so the change takes effect. this allows inotify to watch more files and folders for changes at a time.\nMore information about this can be found here\n","categories":"","description":"How to setup your local development environment\n","excerpt":"How to setup your local development environment\n","ref":"/docs/developers/dev-environment/","tags":"","title":"Development Environment"},{"body":"随着科技的不断进步，人们对于体育运动的兴趣也越来越高。其中，射箭作为一项传统的竞技运动，近年来受到了广泛的关注。然而，由于射箭技术难度较高，需要长时间的训练才能掌握，因此在普及方面存在一定的困难。智能化技术的发展为解决这个问题提供了可能性。通过将摄像头、计算机视觉等技术应用到弓箭上，可以实现对箭矢轨迹、角度等参数的精准测量和分析，从而帮助选手更好地了解自己的技术缺陷并进行改进。 本系统是智能化的射箭辅助系统，我们希望通过该技术来帮助选手更好地掌握射箭技巧，促进射箭运动的普及和发展。\n","categories":"","description":"Learn more about Navidrome's features\n","excerpt":"Learn more about Navidrome's features\n","ref":"/docs/overview/","tags":"","title":"Navidrome Overview"},{"body":"1.研究现状 目前已经有多家公司和研究机构开始了智能化射箭设备的研制工作，例如美国的BowTech、韩国的Hoyt等。但是，大部分产品都是基于机械式传感器的，精度较低，且价格高昂，难以普及。因此，亟待研究一种高精度、高可靠性的智能化射箭设备。 2.关键技术 此项目的关键技术包括计算机视觉技术、轨迹预测技术等。 此项目的难点主要集中在如何保证测量精度、如何保证预测的稳定性和可靠性等方面。\n","categories":"","description":"Learn how to install Navidrome on your specific platform\n","excerpt":"Learn how to install Navidrome on your specific platform\n","ref":"/docs/related-research/","tags":"","title":"Relaed Research"},{"body":"随着科技的不断进步，人们对于体育运动的兴趣也越来越高。其中，射箭作为一项传统的竞技运动，近年来受到了广泛的关注。然而，由于射箭技术难度较高，需要长时间的训练才能掌握，因此在普及方面存在一定的困难。智能化技术的发展为解决这个问题提供了可能性。通过将摄像头、计算机视觉等技术应用到弓箭上，可以实现对箭矢轨迹、角度等参数的精准测量和分析，从而帮助选手更好地了解自己的技术缺陷并进行改进。 本系统是智能化的射箭辅助系统，我们希望通过该技术来帮助选手更好地掌握射箭技巧，促进射箭运动的普及和发展。\n","categories":"","description":"Already installed? Play us a song, Navidrome!\n","excerpt":"Already installed? Play us a song, Navidrome!\n","ref":"/docs/getting-started/","tags":"","title":"Getting Started"},{"body":"摘要: 本研究旨在设计一种智能射箭辅助系统，利用mmpose技术提取新手射手的关键点并评分其姿势规范。这个系统将为射箭爱好者提供实时反馈和指导，帮助他们改善姿势，并提高射击准确度。研究采用了电子控制的设计，以实现射箭过程中的数据采集和分析。 关键词: 智能射箭辅助系统, mmpose, 姿势评分, 射箭准确度, 实时反馈 课题的背景与意义: 射箭是一项历史悠久且极富挑战性的运动，对于新手来说，正确的姿势和动作是提高射击准确度的关键。然而，学习正确的射箭姿势需要经验和专业指导，并且在射击过程中很难自我纠正。因此，设计一种智能射箭辅助系统，能够提供实时反馈和姿势评分是十分必要和有意义的。 综合描述: 本研究提出了一种智能射箭辅助系统，其核心功能是利用mmpose技术来提取新手射手的关键点，并评分其姿势规范。该系统可以通过摄像设备实时监测射手的动作，并通过计算机视觉算法识别关键点并计算关键点之间的角度从而评估射手的姿势是否规范。系统会根据姿势评分提供实时反馈和指导，帮助射箭新手改善姿势并提高射击准确度。 研究设计: 本研究的研究设计包括以下步骤：\n收集射箭动作数据集：使用高清摄像设备记录不同级别的射箭爱好者进行射击的视频，同时记录其角度。 数据预处理：对收集到的视频进行处理，提取关键帧，并使用mmpose技术提取每一帧中射手的关键点。 姿势规范评估：利用姿势评估算法，根据关键点的位置和角度，对射手的姿势进行评分和规范性判断。 实时反馈和指导系统：将评估结果与实时视频流相结合，设计一个交互界面，提供实时反馈和指导，帮助射手纠正错误的姿势并改善技巧。 综上所述，智能射箭辅助系统将利用mmpose技术提取新手射手的关键点，并评分其姿势规范。这个系统将为射箭新手提供实时反馈和指导，帮助他们改善姿势，并提高射击准确度。该系统的设计将包括数据采集和处理、姿势评估和实时反馈。这项研究具有重要的现实意义，可以促进射箭运动的普及和提高。 ","categories":"","description":"","excerpt":"摘要: 本研究旨在设计一种智能射箭辅助系统，利用mmpose技术提取新手射手的关键点并评分其姿势规范。这个系统将为射箭爱好者提供实时反馈和指 …","ref":"/docs/tech-routine/","tags":"","title":"Tech Routine"},{"body":"This page is for developers looking to learn more about Navidrome. For information about contributing to Navidrome, see the Navidrome Contribution Guide.\n","categories":"","description":"Information for Developers.\n","excerpt":"Information for Developers.\n","ref":"/docs/developers/","tags":"","title":"Developers"},{"body":"Introduction Navidrome started in February 2016 as a modern and lightweight alternative to Subsonic: written in Go/React, implementing the subsonic API and thus compatible with all the subsonic clients in the world, licensed under GPL3, … Being relatively young, it does come/use modern development practices like continuous integration, a comprehensive testsuite, a relatively clean codebase, automatic dependency upgrades, automatic linting/CI/static analysis/… on each pull-request, comprehensive documentation … It recently gained popularity due to the decay of Subsonic/Airsonic, and currently has more than 4M downloads of its docker image, and had its binaries downloaded more than 12k times.\nA demo version is available as well: https://demo.navidrome.org\nMentors and Contacts We’re using discord for communications, feel free to join.\nAs for the mentors:\nDeluan Quintão (ET): deluan – @deluan Julien Voisin (CET): jvoisin – @dustriorg Development methodology The main repository is hosted on Github, which is also used for tracking bugs and running the continuous integration. The main communication medium is Discord, along with Twitter for announcements, and Reddit as general purpose forum. The usual way to get code in is to submit a pull-request, which will be reviewed by the community and merged. Adding some tests might of course speed up this process.\nInstructions for students Students willing to take part in the Google Summer of Code 2021 with navidrome should send a couple of pull-requests, to demonstrate that they’re both motivated and capable of writing code and contributing to the project.\nTech stack Server: Go SQLite3 Frontend (WebUI) React React Admin Material-UI Redux Recommended steps Read Google’s instructions for participating Grab any project from the list of ideas that you’re interested in (or even suggest your own!). Write a first draft proposal and ask one of the mentors to review it with you. Submit it using Google’s web interface. Student proposal guidelines Keep it simple enough to fit in no more than a couple of pages. Try to be clear and concise in your writing. Try to split GSoC period into tasks, and each task into subtasks. It helps us to understand how you plan to accomplish your goals, but more importantly, it’ll help you to understand the task deep enough before starting, and prioritize important things to do first. Please, note, how much time a day/week you are able to spend on this project. We do expect something between 30h and 40h. Submit your proposal early, not at the last minute! Feel free to choose a “backup” idea (the second task you want to do), so that conflicts (two students for one task) can be resolved. Ideas 1. Media sharing One of the nice features of Subsonic is its ability to generate a sharing link for a track/album/artist/playlist to send to friends, so that they can listen/download the music without having an account on your instance. This is a nice alternative to youtube links to share music. A nice way to implement this would be to have a table of shares, with a shorturl as ID. The table would store a reference to what is being shared. This shorturl would be used by a public endpoint. We would also need a standalone player similar to what is provided by Spotify when you share music through their service. Ex:\nSteps Add a table for shares Add a way to create shares in the UI Implement the Subsonic API related endpoints: getShares, createShare, updateShare and deleteShare Add a standalone player (could be based on our current React Player) Details Skill level: Medium Required abilities: Go and willing to learn a bit of React Expected outcome: Ability to share music with friends. Links and further reading https://github.com/deluan/navidrome/issues/748 2. Jukebox mode Some servers can be run in “jukebox” mode where the music is played directly on the server’s audio hardware, ex: mpd and Subsonic. A tricky part of this task might be to properly expose the “jukebox client” in the WebUI interface, as the current react-music-player used by Navidrome would have to somehow control the jukebox (via API) instead of the browser’s Audio component.\nSteps Implementing a minimal subsonic client in go to connect to the server Implementing an audio output for the subsonic client Implementing the frontend part to select the jukebox mode and control the subsonic client Implementing the Subsonic API’s jukeboxControl endpoint Details Skill level: Hard Required abilities: Go and React, a bit of UX would be nice Expected outcome: Ability to play music from the device running navidrome. Links and further reading https://github.com/deluan/navidrome/issues/364 https://airsonic.github.io/docs/jukebox/ http://subsonic.org/pages/api.jsp#jukeboxControl 3. Google home/alexa integration Nowadays, tech-oriented people tend to have a home assistant, and thus might want to be able to use it to control their subsonic instance. Since there is already the subsonic API to perform actions, this task on “only” a matter of writing the glue between Alexa/Google home and the API. Some actions might require a bit more than glue, for example, to play specific tracks/albums.\nThis task can be nicely paired with the jukebox one.\nSteps Implementing the glue between Alexa/Google home and the Subsonic API Implementing the frontend part to configure this machinery Details Skill level: Hard Required abilities: Go, having an Alexa/Google Home is a plus, but worse case we can send the student a device. Expected outcome: Ability to play/pause/next/previous the music via a home assistant Links and further reading https://github.com/deluan/navidrome/issues/682 https://developers.google.com/assistant/ https://developer.amazon.com/en-US/alexa/alexa-skills-kit 4. Multiple libraries support Some users want to use multiple libraries at the same time, for example to separate lossy/lossless albums, one for official albums and an other for bootlegs/lives, or one for audiobooks, some are even dreaming about having remote ones to listen to their friend’s music without leaving their navidrome instance!\nSteps Implement support for multiple libraries Implement the UI allowing users to switch between libraries Implement permissions: Which user has access to which library Implement the musicFolderId attribute in most Subsonic API endpoints Plus: Implement support to access remote libraries from the WebUI Details Skill level: Hard Required abilities: Go and SQL, and a teensy bit of react for the UX Expected outcome: Ability to use multiple libraries within a single user account Links and further reading https://github.com/deluan/navidrome/issues/192 http://subsonic.org/pages/api.jsp#getMusicFolders 5. Omnisearch One search bar to search across the whole library, using proper SQLite’s Full Text Search, instead of having one separate search field per domain (artist, album, …)\nSteps Replace current search implementation on the server with a new one using SQLite3’s FTS5 Implement a search bar in the WebUI on the NavBar Implement a Search Results page, with links to artists, albums, songs and playlists Plus: integrate FTS5 with Spellfix1, to enable search for close matches. May not be supported by go-sqlite3 library used by Navidrome Details Skill level: Medium Required abilities: Go and React.JS Expected outcome: Ability to have a single search field operating across all the library Links and further reading https://github.com/deluan/navidrome/issues/255 https://github.com/deluan/navidrome/issues/468 https://www.sqlite.org/fts5.html https://www.sqlite.org/spellfix1.html#overview 6. Infinite Scroll Currently, navidrome is using pagination instead of providing a more convenient infinite-scroll. The implementation isn’t trivial because navidrome is using react-admin, which not only doesn’t provide this feature out of the box, but makes it non-trivial to implement.\nSteps Implement a new List component for React-Admin, that does not use pagination. It should load new data on demand. This component should be usable in all places where we currently use React-Admin’s List Details Skill level: Medium Required abilities: React.JS, with a bit of Go and SQL Expected outcome: Infinite scrolling is implemented and usable. Links and further reading https://github.com/deluan/navidrome/issues/132 https://marmelab.com/blog/2019/01/17/react-timeline.html https://marmelab.com/react-admin/List.html#uselistcontroller 7. Lyrics support It would be nice for navidrome to support LRC files to display lyrics. A possible stretch goal would be to implement lyrics fetching.\nSteps Implement lyrics importing (from tags or external .lrc files) Make navidrome library aware of the presence of lyrics Implement Subsonic API’s getLyrics endpoint In the WebUI, when lyrics are available for the current song being played, set the appropriate attributes of the React Music Player used Details Skill level: Easy Required abilities: Go and React.JS Expected outcome: Ability to see lyrics in the WebUI or Subsonic client when playing a song Links and further reading https://github.com/deluan/navidrome/issues/249 http://subsonic.org/pages/api.jsp#getLyrics https://github.com/lijinke666/react-music-player 8. Volume normalization It would be nice if navidrome could perform audio normalization, to avoid having to fiddle with the volume when listening to different tracks of various volumes.\nSteps Expose a preference to the user Implement per-track normalization Implement per-album normalization Details Skill level: Easy Required abilities: Go and React.JS Expected outcome: Ability to have constant volume output in navidrome Links and further reading https://github.com/deluan/navidrome/issues/233 https://en.wikipedia.org/wiki/Audio_normalization https://trac.ffmpeg.org/wiki/AudioVolume 9. New Album grid It would be nice to have something resembling Plex’s interface, with covert art fading in, as well as a slider to adjust their size.\nSteps Implement the slider for the covers Implement asynchronous loading for the covers Implement the fading in upon loading Details Skill level: Medium Required abilities: React.JS / Material-UI Expected outcome: Have a plex-looking album grid, with fading, scaling and async loading Links and further reading https://github.com/deluan/navidrome/issues/323 https://www.plex.tv/ Links and resources GSoC 2021 timeline GSoC FAQ GSoC student guide ","categories":"","description":"Navidrome GSoC 2021 information\n","excerpt":"Navidrome GSoC 2021 information\n","ref":"/docs/gsoc/","tags":"","title":"Google Summer of Code 2021"},{"body":" 1.适用场合 新手进行射箭的练习和改进。 2.功能 可以自动对训练者的动作实时进行评分，并预测箭矢的速度、飞行时间、飞行距离等。\nDon’t forget to link to your own doc repo rather than our example site! Also make sure users can find these guidelines from your doc repo README: either add them there and link to them from this page, add them here and link to them from the README, or include them in both locations.\nWe use Hugo to format and generate our website, the Docsy theme for styling and site structure, and Netlify to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nQuick start with Netlify Here’s a quick guide to updating the docs. It assumes you’re familiar with the GitHub workflow and you’re happy to use the automated preview of your doc updates:\nFork the Goldydocs repo on GitHub. Make your changes and send a pull request (PR). If you’re not yet ready for a review, add “WIP” to the PR name to indicate it’s a work in progress. (Don’t add the Hugo property “draft = true” to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.) Wait for the automated PR workflow to do some checks. When it’s ready, you should see a comment like this: deploy/netlify — Deploy preview ready! Click Details to the right of “Deploy preview ready” to see a preview of your updates. Continue updating your doc and pushing your changes until you’re happy with the content. When you’re ready for a review, add a comment to the PR, and remove any “WIP” markers. Updating a single page If you’ve just spotted something you’d like to change while using the docs, Docsy has a shortcut for you:\nClick Edit this page in the top right hand corner of the page. If you don’t already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start with Netlify process above to make, preview, and propose your changes. Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\nFollow the instructions in Getting started to install Hugo and any other tools you need. You’ll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\nFork the Goldydocs repo repo into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy-example.git Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you’re serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\nContinue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\nCreating an issue If you’ve found a problem in the docs, but you’re not sure how to fix it yourself, please create an issue in the Goldydocs repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nUseful resources [Docsy user guide](wherever it goes): All about Docsy, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow. ","categories":"","description":"How to contribute to the docs\n","excerpt":"How to contribute to the docs\n","ref":"/docs/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":"Themes in Navidrome are simple Material-UI themes. They are basic JS objects, that allow you to override almost every visual aspect of Navidrome’s UI.\nSteps to create a new theme: Create a new JS file in the ui/src/themes folder that exports an object containing your theme. Create the theme based on the ReactAdmin/Material UI documentation below. See the existing themes for examples. Add a themeName property to your theme. This will be displayed in the theme selector Add your new theme to the ui/src/themes/index.js file Start the application, your new theme should now appear as an option in the theme selector Before submitting a pull request to include your theme in Navidrome, please test your theme thoroughly and make sure it is formatted with the Prettier rules found in the project (ui/src/.prettierrc.js). Also, don’t forget to add lots of screenshots!\nResources for Material-UI theming Start reading ReactAdmin documentation Color Tool: https://material-ui.com/customization/color/#official-color-tool ","categories":"","description":"How to create and contribute with new themes\n","excerpt":"How to create and contribute with new themes\n","ref":"/docs/developers/creating-themes/","tags":"","title":"Creating New Themes"},{"body":"▶︎ Can you add a browsing by folder option/mode to Navidrome? While it is technically possible to add a browsing by folder option, doing so would require significant changes to Navidrome’s internal structures across most of its components. We have decided to focus on features that align with our vision of a music server that emphasizes tags. Implementing folder browsing would not only be a major undertaking, but it could also make supporting all of Navidrome’s current and future features more difficult and error-prone.\nHere are a few situations where users might find folder browsing important, and how Navidrome plans to address them:\nGrouping music by classification (e.g., genre): Navidrome already handle genres, you can browse by genres in Subsonic clients, and it will have a dedicated Genre view in the future. There will also be support for the multivalued grouping tag, with a dedicated view as well. Having different releases for the same album: This will be supported soon. Users who don’t have their library tagged: We explicitly do not support this, as it would make it very difficult to support all features Navidrome has and will have. We do not want to have code that “infers” that a folder with a bunch of MP3 files is an album, as this approach would make the code highly complex and error-prone. If browsing by folder is an essential feature for you, there are alternative music servers that offer this functionality. We encourage you to explore these options if folder browsing is a priority.\n▶︎ I have an album with tracks by different artists, why is it broken up into lots of separate albums, each with their own artist? Navidrome only organises music by tags, it will not automatically group a folder containing a bunch of songs with different artists into one album.\nFor a “Various Artists” compilation, the Part Of Compilation tag (TCMP for id3, COMPILATION for FLAC) must be set, for all tracks.\nFor a single-artist album with a different artist name for each track (for example “Alice feat. Bob” , “Alice feat. Carol”), the Album Artist tags must be the same (“Alice”) for all tracks.\n▶︎ How can I edit my music metadata (id3 tags)? How can I rename/move my files? With Navidrome you can’t. Navidrome does not write to your music folder or the files by design. It may have capabilities to change/add cover art for artists, albums and playlists in the future, but even then it won’t write these images to your Music Folder or embed them in the files.\nThe main reason for this is security: With an internet-facing server like Navidrome, users would only be one exploit away from all their music getting deleted.\nThere are many excellent “real” tag editors / music library managers out there to work with your music library.\nNavidrome recommends: beets (Linux, macOS, Windows) and Musicbrainz Picard (Linux, macOS, Windows).\nOthers: mp3tag (Windows, macOS), ExifTool (Linux, macOS, Windows), Yate (macOS), Kid3 (Windows, macOS, Linux), foobar2000 (Windows, macOS), MusicBee (Windows), Media Monkey (Windows), Groove Music (Windows), Windows Media Player (Windows), Apple iTunes (Windows), Apple Music (macOS).\nIf you are new to organizing and tagging your library, take a look at this post about how to use Picard or beets with Navidrome: Organizing music with Musicbrainz Picard\n▶︎ Where are the logs? To achieve maximum compatibility with a great number of platforms, Navidrome follows the Twelve Factor App methodology as much as possible. Specifically in the case of logs, Navidrome does not try to do any storage or routing of any log files, it only outputs all information to stdout, making it easy for the proper logging tools in each platform to handle them. Some examples bellow:\nLinux: if you installed Navidrome using the Systemd unit (as explained in the install instructions), you can see the logs using the journalctl tool: journalctl -u navidrome.service.\nDocker: you can use docker logs or docker-compose logs to retrieve/follow the logs.\nWindows: depending on what you used to install Navidrome as a service, the logs will be in different locations by default:\nif you used Shawl, just check the shawl_for_navidrome_*.log files created in the same location as the Shawl executable. if you used NSSM, the location of the logs are specified by the AppStdout attribute. if you used WinSW, the log file is in the same directory as the WinSW configuration file for the Navidrome service. ▶︎ Which cloud providers help fund the project with a revenue share? PikaPods has partnered with us to offer you an officially supported, cloud-hosted solution. A share of the revenue helps fund the development of Navidrome at no additional cost for you.\n","categories":"","description":"Frequently Asked Questions\n","excerpt":"Frequently Asked Questions\n","ref":"/docs/faq/","tags":"","title":"FAQ"},{"body":" This documentation is a work in progress. If you feel like something is missing or wrong, please feel free to submit your fixes/suggestions using the links to the right of the screen (only visible in a desktop browser)\n","categories":"","description":"","excerpt":" This documentation is a work in progress. If you feel like something …","ref":"/docs/","tags":"","title":"Introduction"},{"body":"Translations are currently managed in POEditor. If you want to contribute new translations or help reviewing/proofreading any of the existing ones, please join our Discord server, channel #translations, for translation efforts coordination and to get further instructions.\nAlternatively, you can submit a pull request with your proposed changes directly to our project in GitHub.\nDirectory Structure If you choose to contribute translations via a pull request, most of the translation files are located in the resources/i18n directory. These are all served by the Navidrome backend to avoid bloating UI bundle with additional translations. The English translation file is located outside of this main directory at ui/src/i18n/en.json so it can be bundled with the UI.\nTranslation Status ","categories":"","description":"Learn how you can contribute with translations for the UI\n","excerpt":"Learn how you can contribute with translations for the UI\n","ref":"/docs/developers/translations/","tags":"","title":"Translations"},{"body":"Supported Subsonic API endpoints Navidrome is currently compatible with Subsonic API v1.16.1, with some exceptions.\nThis is a (hopefully) up-to-date list of all Subsonic API endpoints implemented in Navidrome. Check the “Notes” column for limitations/missing behavior. Also keep in mind these differences between Navidrome and Subsonic:\nNavidrome will not implement any video related functionality, it is focused on Music only Right now, Navidrome only works with a single Music Library (Music Folder) There are currently no plans to support browse-by-folder. Endpoints for this functionality (Ex: getIndexes, getMusicDirectory) returns a simulated directory tree, using the format: /Artist/Album/01 - Song.mp3. Navidrome does not mark songs as played by calls to stream, only when scrobble is called with submission=true IDs in Navidrome are always strings, normally MD5 hashes or UUIDs. This is important to mention because, even though the Subsonic API schema specifies IDs as strings, some clients insist in converting IDs to integers System ping getLicense Always valid ;) Browsing getMusicFolders Hardcoded to just one, set with ND_MUSICFOLDER configuration getIndexes Doesn’t support shortcuts, nor direct children getMusicDirectory getSong getArtists getArtist getAlbum getGenres getArtistInfo Requires Last.fm and Spotify integration getArtistInfo2 Requires Last.fm and Spotify integration getAlbumInfo Requires Last.fm and Spotify integration getAlbumInfo2 Requires Last.fm and Spotify integration getTopSongs Requires Last.fm integration getSimilarSongs Requires Last.fm integration getSimilarSongs2 Requires Last.fm integration Album/Songs Lists getAlbumList getAlbumList2 getStarred getStarred2 getNowPlaying getRandomSongs getSongsByGenre Searching search2 Doesn’t support Lucene queries, only simple auto complete queries search3 Doesn’t support Lucene queries, only simple auto complete queries Playlists getPlaylists username parameter is not implemented getPlaylist createPlaylist updatePlaylist deletePlaylist Media Retrieval stream download Accepts ids for Songs, Albums, Artists and Playlists. Also accepts transcoding options similar to stream getCoverArt getLyrics Currently only works with embedded lyrics getAvatar If Gravatar is enabled and the user has an email, returns a redirect to their Gravatar. Or else returns a placeholder Media Annotation star unstar setRating scrobble Bookmarks getBookmarks createBookmark deleteBookmark getPlayQueue current is a string id, not int as it shows in the official Subsonic API documentation savePlayQueue Sharing (if EnableSharing is true) getShares createShare updateShare deleteShare Internet radio getInternetRadioStations createInternetRadioStation updateInternetRadioStation deleteInternetRadioStation User Management getUser Hardcoded all roles. Ignores username parameter, and returns the user identified in the authentication getUsers Returns only the user identified in the authentication Media library scanning getScanStatus Also returns the extra fields lastScan and folderCount startScan Accepts an extra fullScan boolean param, to force a full scan ","categories":"","description":"Are you a Subsonic client developer? Check out the API features supported by Navidrome\n","excerpt":"Are you a Subsonic client developer? Check out the API features …","ref":"/docs/developers/subsonic-api/","tags":"","title":"Subsonic API Compatibility"},{"body":" Currently these instructions only work for Unix-based systems (Linux, macOS, BSD, …). If you are getting trouble trying to build Navidrome in a Windows system, please join our Discord server and ask for help, we will be glad to assist you\nIf you can’t find a pre-built binary for your platform, you should open an issue in the project’s GitHub page.\nIf you don’t want to wait, you can try to build the binary yourself, with the following steps.\nFirst, you will need to install Go 1.19+ and Node 16. The setup is very strict, and the steps below only work with these versions (enforced in the Makefile). Make sure to add $GOPATH/bin to your PATH as described in the official Go site\nYou’ll also need to install the TagLib library:\nDebian/Ubuntu: sudo apt install libtag1-dev Arch Linux: pacman -S taglib macOS: brew install taglib FreeBSD: pkg install taglib For other platforms check their installation instructions After the prerequisites above are installed, clone Navidrome’s repository and build it:\n$ git clone https://github.com/navidrome/navidrome $ cd navidrome $ make setup # Install build dependencies $ make buildall # Build UI and server, generates a single executable On FreeBSD you have to use gmake:\n$ git clone https://github.com/navidrome/navidrome $ cd navidrome $ gmake setup # Install build dependencies $ gmake buildall # Build UI and server, generates a single executable This will generate the navidrome executable binary in the project’s root folder.\nNOTE: Remember to install ffmpeg in your system, a requirement for Navidrome to work properly. You may find the latest static build for your platform here: https://johnvansickle.com/ffmpeg/\n","categories":"","description":"Can't find a build for your platform? You can try to build it yourself\n","excerpt":"Can't find a build for your platform? You can try to build it yourself …","ref":"/docs/related-research/build-from-source/","tags":"","title":"Build from sources"},{"body":"","categories":"","description":"","excerpt":"","ref":"/index.json","tags":"","title":""},{"body":" About AAS: Archery Support System AAS (Archery Support System), is a system based on archery motion guidance and analysis. We utilize high-precision human body posture analysis to provide standardized guidance for archery motions. 这是一款能够识别射箭动作是否正确并提供评分的智能化工具，旨在帮助广大射箭爱好者提高技术水平。\n射箭是一项古老而优雅的体育运动，需要高度的技巧和精准的控制力。然而，由于缺乏专业指导或者自身技术局限，许多爱好者在训练中难以察觉自己的错误，导致进步缓慢甚至误入歧途。因此，我们决定研发一款能够帮助他们准确诊断问题并提供有效解决方案的系统。\n当用户进入射箭姿势时，该系统会通过移动设备的摄像头捕捉画面，并利用深度学习算法解析每个动作的细节。它可以实时监测手臂的角度、射箭的姿势，从而判断动作的准确性。一旦发现问题，它会立即给出相应的建议和纠正方案以及评分。此外，它还可以记录和分析用户的训练数据，为他们提供更加科学合理的训练计划。\n值得注意的是，该系统的核心技术采用了人工智能和机器视觉领域的前沿成果。通过深度神经网络和图像处理算法，它能够准确地感知环境和用户的动作，实现高精度的分析和预测。这使得它不仅在射箭领域具有广泛的应用前景，也为其它类似的运动提供了有益的参考。\n除了上述功能，该系统还具有许多独特的优势和亮点。例如，它可以适应各种不同的射箭环境，无论是室内还是室外都能保持稳定的性能；它支持中/英两种语言，方便全球各地的用户使用；而且，它的操作非常简单，即使是没有任何经验的初学者也能够轻松上手。\n在应用场景方面，该系统不仅适用于业余射箭爱好者，也受到了职业选手和教练员的青睐。它可以帮助他们快速定位问题并针对性地调整训练策略，从而提高比赛成绩。此外，它也可以作为教学工具的一部分，让学生更直观地理解射箭技巧，提高学习效率。\n随着技术的不断革新和用户需求的变化，我们计划在未来增加更多的传感器和功能模块，进一步提升该系统的智能化程度。同时，我们也希望能够拓展到其它类型的运动，比如射击、网球等，为更多的运动爱好者带来便利和乐趣。\n这是一款集科技、艺术和运动于一体的优秀产品。它不仅能够帮助射箭爱好者提升技术水平，也为体育产业的数字化转型提供了新的思路和范例。我们期待与您共同探索这个充满机遇的领域，共建美好的明天！\nWho designed this system? We have a team of four members. This project is the concluding project of the 2023 XuHui AI Summer Camp at the Shanghai Artificial Intelligence Laboratory. Three members are part of the project team, and the supervising teacher is Alkdischen.\nHow it works? After a simple installation, Navidrome indexes all digital music stored in your hard drive and makes it available through a nice web player and also by using any\nSubsonic-API compatible mobile client.\nYour music becomes searchable and you can create playlists, rate and “favourite” your loved tracks, albums and artists\n","categories":"","description":"","excerpt":" About AAS: Archery Support System AAS (Archery Support System), is a …","ref":"/about/","tags":"","title":"About Archery Support System"},{"body":"\rArS: Archery Support System 智能射箭评判辅助系统\nIntroduction Code Have a Try A Intelligent Archery Support System\nOur project, ArS, was developed at the Shanghai Artificial Intelligence Laboratory in the summer camp of XuHui AI in 2023.\nThe project team members include Xu Yin, Enxi Liu, and Hongyi Liu, under the guidance of Alkdis Chen.\nOur project enables accurate judgment and assessment of archery actions, a nd we hope that it can accelerate your journey in learning archery.\nAccess your music from anywhere! Choose from a large selection of mobile clients or use the integrated web player\nRead more …\nBlazing fast! Lightweight, fast and self-contained. Runs well even on resource-limited platforms (ex: Raspberry Pi)\nRead more …\nHandles large libraries! Plays well with gigantic music collections (tested with ~900K songs - 2/3 FLAC, 1/3 MP3)\nRead more …\nTranscoding on the fly! Converts/reduces your music files as you play them, so you don’t nuke your data plan\nRead more …\nModern and up-to-date Built with new technologies (GoLang, ReactJS, Material-UI), to ensure modern features and compatibility\nRead more …\nSubsonic API Compatible with the de facto standard Music API, supporting all its clients and ecosystem\nRead more …\nActive project! New releases on a regular basis, adding features and bug fixes\nRead more …\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nJoin the conversation! For announcement of latest features, discussions and help from your fellow users, join our Reddit or our Discord\nRead more …\n","categories":"","description":"","excerpt":"\rArS: Archery Support System 智能射箭评判辅助系统\nIntroduction Code Have a Try A …","ref":"/","tags":"","title":"Archery Support"},{"body":" ArS Demo AAS (Archery Support System), is a system based on archery motion guidance and analysis. We utilize high-precision human body posture analysis to provide standardized guidance for archery motions. Want to try ArS before installing it? Not a problem! Just head to our demo site and enjoy some free music, courtesy of the fine folks from Jamendo Music, Chillhop Music, Nine Inch Nails, NCS Music, blocSonic and the respective artists.\n","categories":"","description":"","excerpt":" ArS Demo AAS (Archery Support System), is a system based on archery …","ref":"/demo/","tags":"","title":"ArS Demo"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":" Navidrome Live Demo Have a try\r欢迎来到我们的全新网站，这是一个由Gradiio构建的智能射箭辅助系统。\n这个网站的核心功能是能够接受用户提供的射箭图片或视频，然后使用MMPose自动检测射箭姿势是否正确并给出评分。这使得用户能够轻松地评估自己的射箭技能，并根据反馈调整姿势和技巧。\n该网站具有以下特点：\n图像上传: 用户可以直接上传射箭图片或视频，或者粘贴图片URL。\nMMPose箭头定位: 一旦用户上传了射箭图片或视频，网站会使用MMPose库自动检测射箭姿势是否正确，并标出关键点。\n结果预览: 用户可以立即看到处理后的图片，并查看正确的射箭姿势。\n数据保存: 用户可以将处理后的图片下载到自己的设备上，以备后续使用。\n射箭建议: 基于射箭姿势，网站会给出射箭建议，比如调整弓弦角度、站姿等。\n快速部署: 借助Gradiio，我们能够在几分钟内将网站部署到GitHub Pages或其他静态网站托管服务上。\nPython集成: 我们利用Gradiio与Python的无缝集成，实现了复杂的图像处理任务和射箭建议生成。\n我们希望这个网站能帮助你更好地掌握射箭技巧，并提高你的成绩。\nNavidrome Articles Here are some articles written by and for members of the Navidrome community. If you write or find any interesting blog post about Navidrome, feel free to add to this list.\nEnglish Use folders as playlists in Navidrome - 25/Oct/2022 by Flemming S. Skaret Migrating from Google Music to Navidrome on Kubernetes - 22/Nov/2020 by Andy Smith [How-To] Install Navidrome Using docker-compose (an Airsonic/Booksonic Alternative) - 14/Nov/2020 by Agricola Navidrome, a self-hosted jukebox that sucks even less - 16/Sep/2020 by Julien Voisin How to install navidrome under freebsd 12 - 04/Jun/2020 by Chrissie Brown Other languages Mein selbstgehosteter Musikstreamingdienst (My self-hosted music streaming service) - German blog post, 19/Mar/2021 by mialikescoffee Navidrome自建流媒体平台 - Navidrome self-built streaming media platform (CentOS7.X) - Chinese (simplified) blog post, 11/Jan/2021 by Northtower Servidor de música. La alternativa a Airsonic es Navidrome - Spanish podcast, 16/Sep/2020 by uGeek スマホでの音楽環境のためメディアサーバを探した話 (A story about searching for a media server) - Japanese blog post, 02/Sep/2020 by aries Les Tutos: Docker No. 14: Navidrome - Serveur de streaming de musique - French installation video, 25/Apr/2020 by Tonton Jo ","categories":"","description":"","excerpt":" Navidrome Live Demo Have a try\r欢迎来到我们的全新网站，这是一个由Gradiio构建的智能射箭辅助系统。\n这 …","ref":"/try/","tags":"","title":"Try"}]